{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","updatedUsers","table","errorMsg","error","catch","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount"],"mappings":"2JAAMA,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAACC,EAASa,GAI3Bb,EAHoBW,EAASG,KAAI,SAAAC,GAAI,OACnCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,MAG/DF,EAAO,YAILX,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IACvCE,EAAW,SAAAC,GAAK,OAAIf,QAAQC,IAAIc,IAItCT,EAAgBH,EAAO,SAASD,KAAKJ,GAAQkB,MAAMF,GACnDR,EAAgBH,EAAO,OAAOD,KAAKJ,GAAQkB,MAAMF,GCvBjD,IAIMG,EAAkB,SAAAC,GACtB,OAAO,IAAIvB,SAAQ,SAACC,EAASa,GAC3B,IAN+BU,EAAKC,EAM9B3B,GANyB0B,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDtB,YAAW,WACUwB,KAAKE,SAAW,IAGjC3B,EAAQ,CACN4B,GAAIN,EAAYM,GAChBzB,KAAMN,IAGVgB,EAAOS,EAAYM,MAClB/B,OAIDgC,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIzB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,OAGI2B,EAAW,SAAAF,GACfxB,QAAQ2B,KAAR,gCAA6CH,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYT,MAAMU,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYT,MAAMU,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAM1B,KAAKuB,GAAYT,MAAMU,GAE/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYT,MAAMU,K","file":"main.c984baf9cdd80d2789c1.js","sourcesContent":["const delay = (ms) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const toggleUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(toggleUsers);\r\n    reject('Упс!');\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\nconst errorMsg = error => console.log(error);\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger).catch(errorMsg);\r\ntoggleUserState(users, 'Lux').then(logger).catch(errorMsg);\r\n\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({\r\n          id: transaction.id,\r\n          time: delay,\r\n        });\r\n      }\r\n      reject(transaction.id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}